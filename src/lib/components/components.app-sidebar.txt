<script lang="ts" module>
	import ArchiveX from "lucide-svelte/icons/archive-x";
	import File from "lucide-svelte/icons/file";
	import Inbox from "lucide-svelte/icons/inbox";
	import Send from "lucide-svelte/icons/send";
	import Trash2 from "lucide-svelte/icons/trash-2";
	import AddFile from "lucide-svelte/icons/file-plus-2";
	import AudioFileIcon from "lucide-svelte/icons/file-volume";

	// This is sample data
	const data = {
		user: {
			name: "Daniel Jyllikoski",
			email: "daniel@jyllikoski.fi",
			avatar: "/avatars/shadcn.jpg",
		},
		navMain: [
			{
				title: "Haastattelut",
				url: "#",
				icon: AudioFileIcon,
				isActive: true,
			},
			{
				title: "Uusi",
				url: "#",
				icon: AddFile,
				isActive: false,
			},
			{
				title: "Roskakori",
				url: "#",
				icon: Trash2,
				isActive: false,
			},
		],
		podcasts: [
{podid:"1000694721078", name: "HS Visio -podcast", date: "21.2.2025", subject: "Eurooppa voi ratkaista sodan rahalla, vieraana Valtteri Ahti",teaser: "",},
{podid:"1000694507711", name: "Suomen nostatus", date: "20.2.2025", subject: "Nyt Yhdysvallat tekee juuri sen, mitä toivomme",teaser: "",},
{podid:"1000694237224", name: "Futucast", date: "20.2.2025", subject: "Tony Rehn | Muovia hiilidioksidista - miten päästöistä tehdään raaka-ainetta",teaser: "",},
{podid:"1000690745960", name: "Futucast", date: "10.2.2025", subject: "Ossi Kettunen | Arktisen alueen geopolitiikka: Trump, Grönlanti, Kiina, Venäjä ja Suomi",teaser: "",},
{podid:"1000690742506", name: "Startup-ministeriö", date: "10.2.2025", subject: "Näin Supercell, Wolt ja Slush tekevät PR-työtä feat Heini Vesander",teaser: "",},
{podid:"1000689947691", name: "HS Visio -podcast", date: "7.2.2025", subject: "Nvidia on suomalaisten kansanosake, vieraana Jukka Lepikkö",teaser: "",},
		]
		
	};
</script>

<script lang="ts">
	import NavUser from "$lib/components/nav-user.svelte";
	import { Label } from "$lib/components/ui/label/index.js";
	import * as Sidebar from "$lib/components/ui/sidebar/index.js";
	import { useSidebar } from "$lib/components/ui/sidebar/index.js";
	import { Switch } from "$lib/components/ui/switch/index.js";
	import Command from "lucide-svelte/icons/command";
	import type { ComponentProps } from "svelte";
	import { goto } from "$app/navigation"; // Import SvelteKit's goto function


	let { ref = $bindable(null), ...restProps }: ComponentProps<typeof Sidebar.Root> = $props();

	let activeItem = $state(data.navMain[0]);
	let podcasts = $state(data.podcasts);
	const sidebar = useSidebar();

	sidebar.setOpen(false);

	function navigateTo(path: string) {
		goto(path);
	}

</script>

<Sidebar.Root
	bind:ref
	collapsible="icon"
	class="overflow-hidden [&>[data-sidebar=sidebar]]:flex-row"
	{...restProps}
>
	<!-- This is the first sidebar -->
	<!-- We disable collapsible and adjust width to icon. -->
	<!-- This will make the sidebar appear as icons. -->
	<Sidebar.Root collapsible="none" class="!w-[calc(var(--sidebar-width-icon)_+_1px)] border-r">
		<Sidebar.Header>
			<Sidebar.Menu>
				<Sidebar.MenuItem>
					<Sidebar.MenuButton size="lg" class="md:h-8 md:p-0">
						{#snippet child({ props })}
							<a href="##" {...props}>
								<div
									class="bg-sidebar-primary text-sidebar-primary-foreground flex aspect-square size-8 items-center justify-center rounded-lg"
								>
									<Command class="size-4" />
								</div>
								<div class="grid flex-1 text-left text-sm leading-tight">
									<span class="truncate font-semibold">Acme Inc</span>
									<span class="truncate text-xs">Enterprise</span>
								</div>
							</a>
						{/snippet}
					</Sidebar.MenuButton>
				</Sidebar.MenuItem>
			</Sidebar.Menu>
		</Sidebar.Header>
		<Sidebar.Content>
			<Sidebar.Group>
				<Sidebar.GroupContent class="px-1.5 md:px-0">
					<Sidebar.Menu>
						{#each data.navMain as item (item.title)}
							<Sidebar.MenuItem>
								<Sidebar.MenuButton
									tooltipContentProps={{
										hidden: false,
									}}
									onclick={() => {
										activeItem = item;
										const mail = data.mails.sort(() => Math.random() - 0.5);
										mails = mail.slice(
											0,
											Math.max(5, Math.floor(Math.random() * 10) + 1)
										);
										sidebar.setOpen(true);
									}}
									isActive={activeItem.title === item.title}
									class="px-2.5 md:px-2"
								>
									{#snippet tooltipContent()}
										{item.title}
									{/snippet}
									<item.icon />
									<span>{item.title}</span>
								</Sidebar.MenuButton>
							</Sidebar.MenuItem>
						{/each}
					</Sidebar.Menu>
				</Sidebar.GroupContent>
			</Sidebar.Group>
		</Sidebar.Content>
		<Sidebar.Footer>
			<NavUser user={data.user} />
		</Sidebar.Footer>
	</Sidebar.Root>

	<!-- This is the second sidebar -->
	<!-- We disable collapsible and let it fill remaining space -->
	<Sidebar.Root collapsible="none" class="hidden flex-1 md:flex">
		<Sidebar.Header class="gap-3.5 border-b p-4 w-max-[40ch]">
			<div class="flex w-full items-center justify-between">
				<div class="text-foreground text-base font-medium">
					{activeItem.title}
				</div>
				
			</div>
			<Sidebar.Input placeholder="Hae teksteistä" />
		</Sidebar.Header>
		<Sidebar.Content class="overflow-y-auto overflow-x-clip">
			<Sidebar.Group class="px-0">
				<Sidebar.GroupContent>
					{#each podcasts as podcast (podcast.podid)}
						<div
							onclick={() => navigateTo(`/transcript/${podcast.podid}`)}
							class="hover:bg-sidebar-accent hover:text-sidebar-accent-foreground flex flex-col items-start gap-2 whitespace-nowrap border-b p-4 text-sm leading-tight last:border-b-0"
						><a href="/transcript/{podcast.podid}">
							<div class="flex w-[260px] items-center gap-2">
								<span>{podcast.name}</span>{" "}
								<span class="ml-auto text-xs">{podcast.date}</span>
							</div>
							<span class="w-[260px] whitespace-break-spaces text-xs">{podcast.subject}</span>
							<!-- <span class="line-clamp-2 w-[260px] whitespace-break-spaces text-xs">
								{mail.teaser}
							</span> -->
						</a>
						</div>
					{/each}
				</Sidebar.GroupContent>
			</Sidebar.Group>
		</Sidebar.Content>
	</Sidebar.Root> 
</Sidebar.Root>




